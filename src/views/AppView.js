// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<button disabled class="hit-button">Hit</button> <button disabled class="stand-button">Stand</button> <button class="reset-button">Reset</button> <div class="betting-container"></div> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div>');

    AppView.prototype.events = {
      'click .hit-button': function() {
        return this.model.get('playerHand').hit();
      },
      'click .stand-button': function() {
        return this.model.get('dealerHand').stand();
      },
      'click .reset-button': function() {
        return this.reset();
      }
    };

    AppView.prototype.initialize = function() {
      this.dealView = new HandView({
        collection: this.model.get('dealerHand')
      }).el;
      this.handView = new HandView({
        collection: this.model.get('playerHand')
      }).el;
      this.render();
      (this.model.get('dealerHand')).on('compareScores', (function(_this) {
        return function() {
          return _this.compareScores();
        };
      })(this));
      return (this.model.get('chipCount')).on('betSet', (function(_this) {
        return function() {
          return _this.flipCards();
        };
      })(this));
    };

    AppView.prototype.toggleButtons = function() {
      var hitButton, standButton;
      hitButton = $('.hit-button');
      standButton = $('.stand-button');
      if (hitButton.attr('disabled')) {
        hitButton.attr('disabled', false);
        return standButton.attr('disabled', false);
      } else {
        hitButton.attr('disabled', true);
        return standButton.attr('disabled', true);
      }
    };

    AppView.prototype.render = function() {
      this.$el.html(this.template());
      this.$('.player-hand-container').html(this.handView);
      this.$('.dealer-hand-container').html(this.dealView);
      return this.$('.betting-container').html(new BettingView({
        model: this.model.get('chipCount')
      }).el);
    };

    AppView.prototype.compareScores = function() {
      var dealHand, dealScore, playHand, playScore;
      playHand = this.model.get('playerHand');
      dealHand = this.model.get('dealerHand');
      playScore = playHand.highestScore();
      dealScore = dealHand.highestScore();
      $('.hit-button').css('display', 'none');
      $('.stand-button').css('display', 'none');
      if (playScore > dealScore) {
        return setTimeout((function() {
          return alert('You are the winner!');
        }), 2000);
      } else if (dealScore > playScore) {
        return setTimeout((function() {
          return alert('Dealer is the winner.');
        }), 2000);
      } else {
        return setTimeout((function() {
          return alert('It\'s a tie!');
        }), 2000);
      }
    };

    AppView.prototype.flipCards = function() {
      var dealHand, playHand;
      this.toggleButtons();
      playHand = this.model.get('playerHand');
      dealHand = this.model.get('dealerHand');
      playHand.at(0).flip();
      playHand.at(1).flip();
      return dealHand.at(1).flip();
    };

    AppView.prototype.reset = function() {
      var dealHand, playHand;
      this.$('.player-hand-container').html('');
      this.$('.dealer-hand-container').html('');
      this.$('.betting-container').html('');
      playHand = this.model.get('playerHand');
      playHand.reset();
      playHand.hit();
      playHand.hit();
      dealHand = this.model.get('dealerHand');
      dealHand.reset();
      dealHand.hit();
      dealHand.first().flip();
      dealHand.hit();
      this.flipCards();
      $('.hit-button').css('display', 'inline');
      $('.stand-button').css('display', 'inline');
      return this.render();
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.js.map
